#!/bin/sh
#
# Set up the variables used by mailserver set up tasks.

cd $(dirname $0)/..

mkdir -p group_vars/all

VARS=group_vars/all/vars.yml
VAULT_VARS=group_vars/all/secret.yml
VAULT_PASS=".vault_pass.txt"

cp bin/all.yml group_vars/all/vars.yml

prompt_with_default()
{
  __prompt="$(eval echo \"$1 [\$$2\]: \")"
  read -p "$__prompt" ans
  eval "$2=\${ans:-\$$2}"
}

domain_name=domain.com
prompt_with_default "Top level domain name " domain_name

echo ${domain_name} > inventory

timezone='America/Los_Angeles'
prompt_with_default "Server timezone " timezone

vault_root_password=MyR00tPa33w0rd
prompt_with_default "root password" vault_root_password

deploy_user_name=deploy
prompt_with_default "deploy user name" deploy_user_name
vault_deploy_password=MyD3pl0yPas3w0rd
prompt_with_default "deploy user password" vault_deploy_password

logwatch_email=postmaster@${domain_name}
prompt_with_default "logwatch reports email" logwatch_email

vault_db_password=myDBpa88w0rd
prompt_with_default "MariaDB root user password " vault_db_password

vault_user_password=postf1x001a9
prompt_with_default "MariaDB postfix user password " vault_user_password

echo ""
echo "NOTE: When DB is initialized, database passwords are set."
echo "If you need to change them, you'll need to connect to DB."
echo ""

for i in domain_name deploy_user_name logwatch_email timezone
do
  echo "$i: $(eval echo \$$i)" >> $VARS
done

vault_root_encrypted_password=$(./bin/mkpasswd "$vault_root_password")
if [ $? -ne 0 ]; then exit $?; fi
vault_deploy_encrypted_password=$(./bin/mkpasswd "$vault_deploy_password")

echo "---" > $VAULT_VARS
for i in root deploy; do
  v="vault_${i}_password"; e="vault_${i}_encrypted_password"
  for j in $v $e; do
    echo "$j: $(eval echo \\\'\"\$$j\"\\\')" >> $VAULT_VARS
  done
done
for i in vault_db_password vault_user_password; do
  echo "$i: $(eval echo \\\'\"\$$i\"\\\')" >> $VAULT_VARS
done

vault_pass='This is my c00l vault password'
prompt_with_default "Your vault password" vault_pass
echo "$vault_pass" > $VAULT_PASS
ansible-vault encrypt $VAULT_VARS
